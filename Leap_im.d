/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module Leap_im;
static import core.stdc.config;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libLeapD.dylib", "libLeapD.bundle"];
    }
    possibleFileNames ~= ["libLeapD.so"];
  } else version (Windows) {
    possibleFileNames ~= ["LeapD.dll", "libLeapD.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacksLeap", "SWIGRegisterExceptionCallbacks_Leap"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallbackLeap", "SWIGRegisterStringCallback_Leap"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("PI_get", "D_PI_get"));
  mixin(bindCode("DEG_TO_RAD_get", "D_DEG_TO_RAD_get"));
  mixin(bindCode("RAD_TO_DEG_get", "D_RAD_TO_DEG_get"));
  mixin(bindCode("EPSILON_get", "D_EPSILON_get"));
  mixin(bindCode("new_Vector__SWIG_0", "D_new_Vector__SWIG_0"));
  mixin(bindCode("new_Vector__SWIG_1", "D_new_Vector__SWIG_1"));
  mixin(bindCode("new_Vector__SWIG_2", "D_new_Vector__SWIG_2"));
  mixin(bindCode("Vector_zero", "D_Vector_zero"));
  mixin(bindCode("Vector_xAxis", "D_Vector_xAxis"));
  mixin(bindCode("Vector_yAxis", "D_Vector_yAxis"));
  mixin(bindCode("Vector_zAxis", "D_Vector_zAxis"));
  mixin(bindCode("Vector_left", "D_Vector_left"));
  mixin(bindCode("Vector_right", "D_Vector_right"));
  mixin(bindCode("Vector_down", "D_Vector_down"));
  mixin(bindCode("Vector_up", "D_Vector_up"));
  mixin(bindCode("Vector_forward", "D_Vector_forward"));
  mixin(bindCode("Vector_backward", "D_Vector_backward"));
  mixin(bindCode("Vector_magnitude", "D_Vector_magnitude"));
  mixin(bindCode("Vector_magnitudeSquared", "D_Vector_magnitudeSquared"));
  mixin(bindCode("Vector_distanceTo", "D_Vector_distanceTo"));
  mixin(bindCode("Vector_angleTo", "D_Vector_angleTo"));
  mixin(bindCode("Vector_pitch", "D_Vector_pitch"));
  mixin(bindCode("Vector_yaw", "D_Vector_yaw"));
  mixin(bindCode("Vector_roll", "D_Vector_roll"));
  mixin(bindCode("Vector_dot", "D_Vector_dot"));
  mixin(bindCode("Vector_cross", "D_Vector_cross"));
  mixin(bindCode("Vector_normalized", "D_Vector_normalized"));
  mixin(bindCode("Vector_swigOpNeg", "D_Vector_swigOpNeg"));
  mixin(bindCode("Vector_swigOpAdd", "D_Vector_swigOpAdd"));
  mixin(bindCode("Vector_swigOpSub", "D_Vector_swigOpSub"));
  mixin(bindCode("Vector_swigOpMul", "D_Vector_swigOpMul"));
  mixin(bindCode("Vector_swigOpDiv", "D_Vector_swigOpDiv"));
  mixin(bindCode("Vector_swigOpAddAssign", "D_Vector_swigOpAddAssign"));
  mixin(bindCode("Vector_swigOpSubAssign", "D_Vector_swigOpSubAssign"));
  mixin(bindCode("Vector_swigOpMulAssign", "D_Vector_swigOpMulAssign"));
  mixin(bindCode("Vector_swigOpDivAssign", "D_Vector_swigOpDivAssign"));
  mixin(bindCode("Vector_toString", "D_Vector_toString"));
  mixin(bindCode("Vector_swigOpEquals", "D_Vector_swigOpEquals"));
  mixin(bindCode("Vector_isValid", "D_Vector_isValid"));
  mixin(bindCode("Vector_opIndex", "D_Vector_opIndex"));
  mixin(bindCode("Vector_toFloatPointer", "D_Vector_toFloatPointer"));
  mixin(bindCode("Vector_x_set", "D_Vector_x_set"));
  mixin(bindCode("Vector_x_get", "D_Vector_x_get"));
  mixin(bindCode("Vector_y_set", "D_Vector_y_set"));
  mixin(bindCode("Vector_y_get", "D_Vector_y_get"));
  mixin(bindCode("Vector_z_set", "D_Vector_z_set"));
  mixin(bindCode("Vector_z_get", "D_Vector_z_get"));
  mixin(bindCode("delete_Vector", "D_delete_Vector"));
  mixin(bindCode("FloatArray_opIndex", "D_FloatArray_opIndex"));
  mixin(bindCode("FloatArray_m_array_set", "D_FloatArray_m_array_set"));
  mixin(bindCode("FloatArray_m_array_get", "D_FloatArray_m_array_get"));
  mixin(bindCode("new_FloatArray", "D_new_FloatArray"));
  mixin(bindCode("delete_FloatArray", "D_delete_FloatArray"));
  mixin(bindCode("new_Matrix__SWIG_0", "D_new_Matrix__SWIG_0"));
  mixin(bindCode("new_Matrix__SWIG_1", "D_new_Matrix__SWIG_1"));
  mixin(bindCode("new_Matrix__SWIG_2", "D_new_Matrix__SWIG_2"));
  mixin(bindCode("new_Matrix__SWIG_3", "D_new_Matrix__SWIG_3"));
  mixin(bindCode("new_Matrix__SWIG_4", "D_new_Matrix__SWIG_4"));
  mixin(bindCode("new_Matrix__SWIG_5", "D_new_Matrix__SWIG_5"));
  mixin(bindCode("Matrix_identity", "D_Matrix_identity"));
  mixin(bindCode("Matrix_setRotation", "D_Matrix_setRotation"));
  mixin(bindCode("Matrix_transformPoint", "D_Matrix_transformPoint"));
  mixin(bindCode("Matrix_transformDirection", "D_Matrix_transformDirection"));
  mixin(bindCode("Matrix_rigidInverse", "D_Matrix_rigidInverse"));
  mixin(bindCode("Matrix_swigOpMul", "D_Matrix_swigOpMul"));
  mixin(bindCode("Matrix_swigOpMulAssign", "D_Matrix_swigOpMulAssign"));
  mixin(bindCode("Matrix_swigOpEquals", "D_Matrix_swigOpEquals"));
  mixin(bindCode("Matrix_toArray3x3", "D_Matrix_toArray3x3"));
  mixin(bindCode("Matrix_toArray4x4", "D_Matrix_toArray4x4"));
  mixin(bindCode("Matrix_toString", "D_Matrix_toString"));
  mixin(bindCode("Matrix_xBasis_set", "D_Matrix_xBasis_set"));
  mixin(bindCode("Matrix_xBasis_get", "D_Matrix_xBasis_get"));
  mixin(bindCode("Matrix_yBasis_set", "D_Matrix_yBasis_set"));
  mixin(bindCode("Matrix_yBasis_get", "D_Matrix_yBasis_get"));
  mixin(bindCode("Matrix_zBasis_set", "D_Matrix_zBasis_set"));
  mixin(bindCode("Matrix_zBasis_get", "D_Matrix_zBasis_get"));
  mixin(bindCode("Matrix_origin_set", "D_Matrix_origin_set"));
  mixin(bindCode("Matrix_origin_get", "D_Matrix_origin_get"));
  mixin(bindCode("delete_Matrix", "D_delete_Matrix"));
  mixin(bindCode("new_Pointable", "D_new_Pointable"));
  mixin(bindCode("Pointable_id", "D_Pointable_id"));
  mixin(bindCode("Pointable_frame", "D_Pointable_frame"));
  mixin(bindCode("Pointable_hand", "D_Pointable_hand"));
  mixin(bindCode("Pointable_tipPosition", "D_Pointable_tipPosition"));
  mixin(bindCode("Pointable_tipVelocity", "D_Pointable_tipVelocity"));
  mixin(bindCode("Pointable_direction", "D_Pointable_direction"));
  mixin(bindCode("Pointable_width", "D_Pointable_width"));
  mixin(bindCode("Pointable_length", "D_Pointable_length"));
  mixin(bindCode("Pointable_isFinger", "D_Pointable_isFinger"));
  mixin(bindCode("Pointable_isTool", "D_Pointable_isTool"));
  mixin(bindCode("Pointable_isExtended", "D_Pointable_isExtended"));
  mixin(bindCode("Pointable_isValid", "D_Pointable_isValid"));
  mixin(bindCode("Pointable_touchZone", "D_Pointable_touchZone"));
  mixin(bindCode("Pointable_touchDistance", "D_Pointable_touchDistance"));
  mixin(bindCode("Pointable_stabilizedTipPosition", "D_Pointable_stabilizedTipPosition"));
  mixin(bindCode("Pointable_timeVisible", "D_Pointable_timeVisible"));
  mixin(bindCode("Pointable_invalid", "D_Pointable_invalid"));
  mixin(bindCode("Pointable_swigOpEquals", "D_Pointable_swigOpEquals"));
  mixin(bindCode("Pointable_toString", "D_Pointable_toString"));
  mixin(bindCode("delete_Pointable", "D_delete_Pointable"));
  mixin(bindCode("Pointable_Upcast", "D_Pointable_Upcast"));
  mixin(bindCode("new_Arm", "D_new_Arm"));
  mixin(bindCode("Arm_width", "D_Arm_width"));
  mixin(bindCode("Arm_direction", "D_Arm_direction"));
  mixin(bindCode("Arm_basis", "D_Arm_basis"));
  mixin(bindCode("Arm_elbowPosition", "D_Arm_elbowPosition"));
  mixin(bindCode("Arm_wristPosition", "D_Arm_wristPosition"));
  mixin(bindCode("Arm_center", "D_Arm_center"));
  mixin(bindCode("Arm_isValid", "D_Arm_isValid"));
  mixin(bindCode("Arm_invalid", "D_Arm_invalid"));
  mixin(bindCode("Arm_swigOpEquals", "D_Arm_swigOpEquals"));
  mixin(bindCode("Arm_toString", "D_Arm_toString"));
  mixin(bindCode("delete_Arm", "D_delete_Arm"));
  mixin(bindCode("Arm_Upcast", "D_Arm_Upcast"));
  mixin(bindCode("new_Bone", "D_new_Bone"));
  mixin(bindCode("Bone_prevJoint", "D_Bone_prevJoint"));
  mixin(bindCode("Bone_nextJoint", "D_Bone_nextJoint"));
  mixin(bindCode("Bone_center", "D_Bone_center"));
  mixin(bindCode("Bone_direction", "D_Bone_direction"));
  mixin(bindCode("Bone_length", "D_Bone_length"));
  mixin(bindCode("Bone_width", "D_Bone_width"));
  mixin(bindCode("Bone_type", "D_Bone_type"));
  mixin(bindCode("Bone_basis", "D_Bone_basis"));
  mixin(bindCode("Bone_isValid", "D_Bone_isValid"));
  mixin(bindCode("Bone_invalid", "D_Bone_invalid"));
  mixin(bindCode("Bone_swigOpEquals", "D_Bone_swigOpEquals"));
  mixin(bindCode("Bone_toString", "D_Bone_toString"));
  mixin(bindCode("delete_Bone", "D_delete_Bone"));
  mixin(bindCode("Bone_Upcast", "D_Bone_Upcast"));
  mixin(bindCode("new_Finger__SWIG_0", "D_new_Finger__SWIG_0"));
  mixin(bindCode("new_Finger__SWIG_1", "D_new_Finger__SWIG_1"));
  mixin(bindCode("Finger_jointPosition", "D_Finger_jointPosition"));
  mixin(bindCode("Finger_bone", "D_Finger_bone"));
  mixin(bindCode("Finger_type", "D_Finger_type"));
  mixin(bindCode("Finger_invalid", "D_Finger_invalid"));
  mixin(bindCode("Finger_toString", "D_Finger_toString"));
  mixin(bindCode("delete_Finger", "D_delete_Finger"));
  mixin(bindCode("Finger_Upcast", "D_Finger_Upcast"));
  mixin(bindCode("new_Tool__SWIG_0", "D_new_Tool__SWIG_0"));
  mixin(bindCode("new_Tool__SWIG_1", "D_new_Tool__SWIG_1"));
  mixin(bindCode("Tool_invalid", "D_Tool_invalid"));
  mixin(bindCode("Tool_toString", "D_Tool_toString"));
  mixin(bindCode("delete_Tool", "D_delete_Tool"));
  mixin(bindCode("Tool_Upcast", "D_Tool_Upcast"));
  mixin(bindCode("new_Hand", "D_new_Hand"));
  mixin(bindCode("Hand_id", "D_Hand_id"));
  mixin(bindCode("Hand_frame", "D_Hand_frame"));
  mixin(bindCode("Hand_pointables", "D_Hand_pointables"));
  mixin(bindCode("Hand_pointable", "D_Hand_pointable"));
  mixin(bindCode("Hand_fingers", "D_Hand_fingers"));
  mixin(bindCode("Hand_finger", "D_Hand_finger"));
  mixin(bindCode("Hand_tools", "D_Hand_tools"));
  mixin(bindCode("Hand_tool", "D_Hand_tool"));
  mixin(bindCode("Hand_palmPosition", "D_Hand_palmPosition"));
  mixin(bindCode("Hand_stabilizedPalmPosition", "D_Hand_stabilizedPalmPosition"));
  mixin(bindCode("Hand_palmVelocity", "D_Hand_palmVelocity"));
  mixin(bindCode("Hand_palmNormal", "D_Hand_palmNormal"));
  mixin(bindCode("Hand_palmWidth", "D_Hand_palmWidth"));
  mixin(bindCode("Hand_direction", "D_Hand_direction"));
  mixin(bindCode("Hand_basis", "D_Hand_basis"));
  mixin(bindCode("Hand_arm", "D_Hand_arm"));
  mixin(bindCode("Hand_wristPosition", "D_Hand_wristPosition"));
  mixin(bindCode("Hand_sphereCenter", "D_Hand_sphereCenter"));
  mixin(bindCode("Hand_sphereRadius", "D_Hand_sphereRadius"));
  mixin(bindCode("Hand_pinchStrength", "D_Hand_pinchStrength"));
  mixin(bindCode("Hand_grabStrength", "D_Hand_grabStrength"));
  mixin(bindCode("Hand_translation", "D_Hand_translation"));
  mixin(bindCode("Hand_translationProbability", "D_Hand_translationProbability"));
  mixin(bindCode("Hand_rotationAxis", "D_Hand_rotationAxis"));
  mixin(bindCode("Hand_rotationAngle__SWIG_0", "D_Hand_rotationAngle__SWIG_0"));
  mixin(bindCode("Hand_rotationAngle__SWIG_1", "D_Hand_rotationAngle__SWIG_1"));
  mixin(bindCode("Hand_rotationMatrix", "D_Hand_rotationMatrix"));
  mixin(bindCode("Hand_rotationProbability", "D_Hand_rotationProbability"));
  mixin(bindCode("Hand_scaleFactor", "D_Hand_scaleFactor"));
  mixin(bindCode("Hand_scaleProbability", "D_Hand_scaleProbability"));
  mixin(bindCode("Hand_timeVisible", "D_Hand_timeVisible"));
  mixin(bindCode("Hand_confidence", "D_Hand_confidence"));
  mixin(bindCode("Hand_isLeft", "D_Hand_isLeft"));
  mixin(bindCode("Hand_isRight", "D_Hand_isRight"));
  mixin(bindCode("Hand_isValid", "D_Hand_isValid"));
  mixin(bindCode("Hand_invalid", "D_Hand_invalid"));
  mixin(bindCode("Hand_swigOpEquals", "D_Hand_swigOpEquals"));
  mixin(bindCode("Hand_toString", "D_Hand_toString"));
  mixin(bindCode("delete_Hand", "D_delete_Hand"));
  mixin(bindCode("Hand_Upcast", "D_Hand_Upcast"));
  mixin(bindCode("new_Gesture__SWIG_0", "D_new_Gesture__SWIG_0"));
  mixin(bindCode("new_Gesture__SWIG_1", "D_new_Gesture__SWIG_1"));
  mixin(bindCode("Gesture_type", "D_Gesture_type"));
  mixin(bindCode("Gesture_state", "D_Gesture_state"));
  mixin(bindCode("Gesture_id", "D_Gesture_id"));
  mixin(bindCode("Gesture_duration", "D_Gesture_duration"));
  mixin(bindCode("Gesture_durationSeconds", "D_Gesture_durationSeconds"));
  mixin(bindCode("Gesture_frame", "D_Gesture_frame"));
  mixin(bindCode("Gesture_hands", "D_Gesture_hands"));
  mixin(bindCode("Gesture_pointables", "D_Gesture_pointables"));
  mixin(bindCode("Gesture_isValid", "D_Gesture_isValid"));
  mixin(bindCode("Gesture_swigOpEquals", "D_Gesture_swigOpEquals"));
  mixin(bindCode("Gesture_toString", "D_Gesture_toString"));
  mixin(bindCode("Gesture_invalid", "D_Gesture_invalid"));
  mixin(bindCode("delete_Gesture", "D_delete_Gesture"));
  mixin(bindCode("Gesture_Upcast", "D_Gesture_Upcast"));
  mixin(bindCode("SwipeGesture_classType", "D_SwipeGesture_classType"));
  mixin(bindCode("new_SwipeGesture__SWIG_0", "D_new_SwipeGesture__SWIG_0"));
  mixin(bindCode("new_SwipeGesture__SWIG_1", "D_new_SwipeGesture__SWIG_1"));
  mixin(bindCode("SwipeGesture_startPosition", "D_SwipeGesture_startPosition"));
  mixin(bindCode("SwipeGesture_position", "D_SwipeGesture_position"));
  mixin(bindCode("SwipeGesture_direction", "D_SwipeGesture_direction"));
  mixin(bindCode("SwipeGesture_speed", "D_SwipeGesture_speed"));
  mixin(bindCode("SwipeGesture_pointable", "D_SwipeGesture_pointable"));
  mixin(bindCode("delete_SwipeGesture", "D_delete_SwipeGesture"));
  mixin(bindCode("SwipeGesture_Upcast", "D_SwipeGesture_Upcast"));
  mixin(bindCode("CircleGesture_classType", "D_CircleGesture_classType"));
  mixin(bindCode("new_CircleGesture__SWIG_0", "D_new_CircleGesture__SWIG_0"));
  mixin(bindCode("new_CircleGesture__SWIG_1", "D_new_CircleGesture__SWIG_1"));
  mixin(bindCode("CircleGesture_center", "D_CircleGesture_center"));
  mixin(bindCode("CircleGesture_normal", "D_CircleGesture_normal"));
  mixin(bindCode("CircleGesture_progress", "D_CircleGesture_progress"));
  mixin(bindCode("CircleGesture_radius", "D_CircleGesture_radius"));
  mixin(bindCode("CircleGesture_pointable", "D_CircleGesture_pointable"));
  mixin(bindCode("delete_CircleGesture", "D_delete_CircleGesture"));
  mixin(bindCode("CircleGesture_Upcast", "D_CircleGesture_Upcast"));
  mixin(bindCode("ScreenTapGesture_classType", "D_ScreenTapGesture_classType"));
  mixin(bindCode("new_ScreenTapGesture__SWIG_0", "D_new_ScreenTapGesture__SWIG_0"));
  mixin(bindCode("new_ScreenTapGesture__SWIG_1", "D_new_ScreenTapGesture__SWIG_1"));
  mixin(bindCode("ScreenTapGesture_position", "D_ScreenTapGesture_position"));
  mixin(bindCode("ScreenTapGesture_direction", "D_ScreenTapGesture_direction"));
  mixin(bindCode("ScreenTapGesture_progress", "D_ScreenTapGesture_progress"));
  mixin(bindCode("ScreenTapGesture_pointable", "D_ScreenTapGesture_pointable"));
  mixin(bindCode("delete_ScreenTapGesture", "D_delete_ScreenTapGesture"));
  mixin(bindCode("ScreenTapGesture_Upcast", "D_ScreenTapGesture_Upcast"));
  mixin(bindCode("KeyTapGesture_classType", "D_KeyTapGesture_classType"));
  mixin(bindCode("new_KeyTapGesture__SWIG_0", "D_new_KeyTapGesture__SWIG_0"));
  mixin(bindCode("new_KeyTapGesture__SWIG_1", "D_new_KeyTapGesture__SWIG_1"));
  mixin(bindCode("KeyTapGesture_position", "D_KeyTapGesture_position"));
  mixin(bindCode("KeyTapGesture_direction", "D_KeyTapGesture_direction"));
  mixin(bindCode("KeyTapGesture_progress", "D_KeyTapGesture_progress"));
  mixin(bindCode("KeyTapGesture_pointable", "D_KeyTapGesture_pointable"));
  mixin(bindCode("delete_KeyTapGesture", "D_delete_KeyTapGesture"));
  mixin(bindCode("KeyTapGesture_Upcast", "D_KeyTapGesture_Upcast"));
  mixin(bindCode("new_Screen", "D_new_Screen"));
  mixin(bindCode("Screen_id", "D_Screen_id"));
  mixin(bindCode("Screen_intersect__SWIG_0", "D_Screen_intersect__SWIG_0"));
  mixin(bindCode("Screen_intersect__SWIG_1", "D_Screen_intersect__SWIG_1"));
  mixin(bindCode("Screen_intersect__SWIG_2", "D_Screen_intersect__SWIG_2"));
  mixin(bindCode("Screen_intersect__SWIG_3", "D_Screen_intersect__SWIG_3"));
  mixin(bindCode("Screen_project__SWIG_0", "D_Screen_project__SWIG_0"));
  mixin(bindCode("Screen_project__SWIG_1", "D_Screen_project__SWIG_1"));
  mixin(bindCode("Screen_horizontalAxis", "D_Screen_horizontalAxis"));
  mixin(bindCode("Screen_verticalAxis", "D_Screen_verticalAxis"));
  mixin(bindCode("Screen_bottomLeftCorner", "D_Screen_bottomLeftCorner"));
  mixin(bindCode("Screen_normal", "D_Screen_normal"));
  mixin(bindCode("Screen_widthPixels", "D_Screen_widthPixels"));
  mixin(bindCode("Screen_heightPixels", "D_Screen_heightPixels"));
  mixin(bindCode("Screen_distanceToPoint", "D_Screen_distanceToPoint"));
  mixin(bindCode("Screen_isValid", "D_Screen_isValid"));
  mixin(bindCode("Screen_invalid", "D_Screen_invalid"));
  mixin(bindCode("Screen_swigOpEquals", "D_Screen_swigOpEquals"));
  mixin(bindCode("Screen_toString", "D_Screen_toString"));
  mixin(bindCode("delete_Screen", "D_delete_Screen"));
  mixin(bindCode("Screen_Upcast", "D_Screen_Upcast"));
  mixin(bindCode("new_Device", "D_new_Device"));
  mixin(bindCode("Device_horizontalViewAngle", "D_Device_horizontalViewAngle"));
  mixin(bindCode("Device_verticalViewAngle", "D_Device_verticalViewAngle"));
  mixin(bindCode("Device_range", "D_Device_range"));
  mixin(bindCode("Device_baseline", "D_Device_baseline"));
  mixin(bindCode("Device_distanceToBoundary", "D_Device_distanceToBoundary"));
  mixin(bindCode("Device_isEmbedded", "D_Device_isEmbedded"));
  mixin(bindCode("Device_isStreaming", "D_Device_isStreaming"));
  mixin(bindCode("Device_isFlipped", "D_Device_isFlipped"));
  mixin(bindCode("Device_type", "D_Device_type"));
  mixin(bindCode("Device_serialNumber", "D_Device_serialNumber"));
  mixin(bindCode("Device_position", "D_Device_position"));
  mixin(bindCode("Device_orientation", "D_Device_orientation"));
  mixin(bindCode("Device_isValid", "D_Device_isValid"));
  mixin(bindCode("Device_invalid", "D_Device_invalid"));
  mixin(bindCode("Device_swigOpEquals", "D_Device_swigOpEquals"));
  mixin(bindCode("Device_toString", "D_Device_toString"));
  mixin(bindCode("delete_Device", "D_delete_Device"));
  mixin(bindCode("Device_Upcast", "D_Device_Upcast"));
  mixin(bindCode("new_Image", "D_new_Image"));
  mixin(bindCode("Image_sequenceId", "D_Image_sequenceId"));
  mixin(bindCode("Image_id", "D_Image_id"));
  mixin(bindCode("Image_data", "D_Image_data"));
  mixin(bindCode("Image_distortion", "D_Image_distortion"));
  mixin(bindCode("Image_width", "D_Image_width"));
  mixin(bindCode("Image_height", "D_Image_height"));
  mixin(bindCode("Image_bytesPerPixel", "D_Image_bytesPerPixel"));
  mixin(bindCode("Image_format", "D_Image_format"));
  mixin(bindCode("Image_distortionWidth", "D_Image_distortionWidth"));
  mixin(bindCode("Image_distortionHeight", "D_Image_distortionHeight"));
  mixin(bindCode("Image_rayOffsetX", "D_Image_rayOffsetX"));
  mixin(bindCode("Image_rayOffsetY", "D_Image_rayOffsetY"));
  mixin(bindCode("Image_rayScaleX", "D_Image_rayScaleX"));
  mixin(bindCode("Image_rayScaleY", "D_Image_rayScaleY"));
  mixin(bindCode("Image_rectify", "D_Image_rectify"));
  mixin(bindCode("Image_warp", "D_Image_warp"));
  mixin(bindCode("Image_timestamp", "D_Image_timestamp"));
  mixin(bindCode("Image_isValid", "D_Image_isValid"));
  mixin(bindCode("Image_invalid", "D_Image_invalid"));
  mixin(bindCode("Image_swigOpEquals", "D_Image_swigOpEquals"));
  mixin(bindCode("Image_toString", "D_Image_toString"));
  mixin(bindCode("delete_Image", "D_delete_Image"));
  mixin(bindCode("Image_Upcast", "D_Image_Upcast"));
  mixin(bindCode("new_Mask", "D_new_Mask"));
  mixin(bindCode("Mask_sequenceId", "D_Mask_sequenceId"));
  mixin(bindCode("Mask_id", "D_Mask_id"));
  mixin(bindCode("Mask_data", "D_Mask_data"));
  mixin(bindCode("Mask_width", "D_Mask_width"));
  mixin(bindCode("Mask_height", "D_Mask_height"));
  mixin(bindCode("Mask_offsetX", "D_Mask_offsetX"));
  mixin(bindCode("Mask_offsetY", "D_Mask_offsetY"));
  mixin(bindCode("Mask_isValid", "D_Mask_isValid"));
  mixin(bindCode("Mask_invalid", "D_Mask_invalid"));
  mixin(bindCode("Mask_swigOpEquals", "D_Mask_swigOpEquals"));
  mixin(bindCode("Mask_toString", "D_Mask_toString"));
  mixin(bindCode("delete_Mask", "D_delete_Mask"));
  mixin(bindCode("Mask_Upcast", "D_Mask_Upcast"));
  mixin(bindCode("new_PointableList", "D_new_PointableList"));
  mixin(bindCode("PointableList_count", "D_PointableList_count"));
  mixin(bindCode("PointableList_isEmpty", "D_PointableList_isEmpty"));
  mixin(bindCode("PointableList_opIndex", "D_PointableList_opIndex"));
  mixin(bindCode("PointableList_append__SWIG_0", "D_PointableList_append__SWIG_0"));
  mixin(bindCode("PointableList_append__SWIG_1", "D_PointableList_append__SWIG_1"));
  mixin(bindCode("PointableList_append__SWIG_2", "D_PointableList_append__SWIG_2"));
  mixin(bindCode("PointableList_leftmost", "D_PointableList_leftmost"));
  mixin(bindCode("PointableList_rightmost", "D_PointableList_rightmost"));
  mixin(bindCode("PointableList_frontmost", "D_PointableList_frontmost"));
  mixin(bindCode("PointableList_extended", "D_PointableList_extended"));
  mixin(bindCode("delete_PointableList", "D_delete_PointableList"));
  mixin(bindCode("PointableList_Upcast", "D_PointableList_Upcast"));
  mixin(bindCode("new_FingerList", "D_new_FingerList"));
  mixin(bindCode("FingerList_count", "D_FingerList_count"));
  mixin(bindCode("FingerList_isEmpty", "D_FingerList_isEmpty"));
  mixin(bindCode("FingerList_opIndex", "D_FingerList_opIndex"));
  mixin(bindCode("FingerList_append", "D_FingerList_append"));
  mixin(bindCode("FingerList_leftmost", "D_FingerList_leftmost"));
  mixin(bindCode("FingerList_rightmost", "D_FingerList_rightmost"));
  mixin(bindCode("FingerList_frontmost", "D_FingerList_frontmost"));
  mixin(bindCode("FingerList_extended", "D_FingerList_extended"));
  mixin(bindCode("FingerList_fingerType", "D_FingerList_fingerType"));
  mixin(bindCode("delete_FingerList", "D_delete_FingerList"));
  mixin(bindCode("FingerList_Upcast", "D_FingerList_Upcast"));
  mixin(bindCode("new_ToolList", "D_new_ToolList"));
  mixin(bindCode("ToolList_count", "D_ToolList_count"));
  mixin(bindCode("ToolList_isEmpty", "D_ToolList_isEmpty"));
  mixin(bindCode("ToolList_opIndex", "D_ToolList_opIndex"));
  mixin(bindCode("ToolList_append", "D_ToolList_append"));
  mixin(bindCode("ToolList_leftmost", "D_ToolList_leftmost"));
  mixin(bindCode("ToolList_rightmost", "D_ToolList_rightmost"));
  mixin(bindCode("ToolList_frontmost", "D_ToolList_frontmost"));
  mixin(bindCode("delete_ToolList", "D_delete_ToolList"));
  mixin(bindCode("ToolList_Upcast", "D_ToolList_Upcast"));
  mixin(bindCode("new_HandList", "D_new_HandList"));
  mixin(bindCode("HandList_count", "D_HandList_count"));
  mixin(bindCode("HandList_isEmpty", "D_HandList_isEmpty"));
  mixin(bindCode("HandList_opIndex", "D_HandList_opIndex"));
  mixin(bindCode("HandList_append", "D_HandList_append"));
  mixin(bindCode("HandList_leftmost", "D_HandList_leftmost"));
  mixin(bindCode("HandList_rightmost", "D_HandList_rightmost"));
  mixin(bindCode("HandList_frontmost", "D_HandList_frontmost"));
  mixin(bindCode("delete_HandList", "D_delete_HandList"));
  mixin(bindCode("HandList_Upcast", "D_HandList_Upcast"));
  mixin(bindCode("new_GestureList", "D_new_GestureList"));
  mixin(bindCode("GestureList_count", "D_GestureList_count"));
  mixin(bindCode("GestureList_isEmpty", "D_GestureList_isEmpty"));
  mixin(bindCode("GestureList_opIndex", "D_GestureList_opIndex"));
  mixin(bindCode("GestureList_append", "D_GestureList_append"));
  mixin(bindCode("delete_GestureList", "D_delete_GestureList"));
  mixin(bindCode("GestureList_Upcast", "D_GestureList_Upcast"));
  mixin(bindCode("new_ScreenList", "D_new_ScreenList"));
  mixin(bindCode("ScreenList_count", "D_ScreenList_count"));
  mixin(bindCode("ScreenList_isEmpty", "D_ScreenList_isEmpty"));
  mixin(bindCode("ScreenList_opIndex", "D_ScreenList_opIndex"));
  mixin(bindCode("ScreenList_closestScreenHit__SWIG_0", "D_ScreenList_closestScreenHit__SWIG_0"));
  mixin(bindCode("ScreenList_closestScreenHit__SWIG_1", "D_ScreenList_closestScreenHit__SWIG_1"));
  mixin(bindCode("ScreenList_closestScreen", "D_ScreenList_closestScreen"));
  mixin(bindCode("delete_ScreenList", "D_delete_ScreenList"));
  mixin(bindCode("ScreenList_Upcast", "D_ScreenList_Upcast"));
  mixin(bindCode("new_DeviceList", "D_new_DeviceList"));
  mixin(bindCode("DeviceList_count", "D_DeviceList_count"));
  mixin(bindCode("DeviceList_isEmpty", "D_DeviceList_isEmpty"));
  mixin(bindCode("DeviceList_opIndex", "D_DeviceList_opIndex"));
  mixin(bindCode("DeviceList_append", "D_DeviceList_append"));
  mixin(bindCode("delete_DeviceList", "D_delete_DeviceList"));
  mixin(bindCode("DeviceList_Upcast", "D_DeviceList_Upcast"));
  mixin(bindCode("new_ImageList", "D_new_ImageList"));
  mixin(bindCode("ImageList_count", "D_ImageList_count"));
  mixin(bindCode("ImageList_isEmpty", "D_ImageList_isEmpty"));
  mixin(bindCode("ImageList_opIndex", "D_ImageList_opIndex"));
  mixin(bindCode("ImageList_append", "D_ImageList_append"));
  mixin(bindCode("delete_ImageList", "D_delete_ImageList"));
  mixin(bindCode("ImageList_Upcast", "D_ImageList_Upcast"));
  mixin(bindCode("new_TrackedQuad", "D_new_TrackedQuad"));
  mixin(bindCode("TrackedQuad_width", "D_TrackedQuad_width"));
  mixin(bindCode("TrackedQuad_height", "D_TrackedQuad_height"));
  mixin(bindCode("TrackedQuad_resolutionX", "D_TrackedQuad_resolutionX"));
  mixin(bindCode("TrackedQuad_resolutionY", "D_TrackedQuad_resolutionY"));
  mixin(bindCode("TrackedQuad_visible", "D_TrackedQuad_visible"));
  mixin(bindCode("TrackedQuad_orientation", "D_TrackedQuad_orientation"));
  mixin(bindCode("TrackedQuad_position", "D_TrackedQuad_position"));
  mixin(bindCode("TrackedQuad_masks", "D_TrackedQuad_masks"));
  mixin(bindCode("TrackedQuad_images", "D_TrackedQuad_images"));
  mixin(bindCode("TrackedQuad_isValid", "D_TrackedQuad_isValid"));
  mixin(bindCode("TrackedQuad_invalid", "D_TrackedQuad_invalid"));
  mixin(bindCode("TrackedQuad_swigOpEquals", "D_TrackedQuad_swigOpEquals"));
  mixin(bindCode("TrackedQuad_toString", "D_TrackedQuad_toString"));
  mixin(bindCode("delete_TrackedQuad", "D_delete_TrackedQuad"));
  mixin(bindCode("TrackedQuad_Upcast", "D_TrackedQuad_Upcast"));
  mixin(bindCode("new_MaskList", "D_new_MaskList"));
  mixin(bindCode("MaskList_count", "D_MaskList_count"));
  mixin(bindCode("MaskList_isEmpty", "D_MaskList_isEmpty"));
  mixin(bindCode("MaskList_opIndex", "D_MaskList_opIndex"));
  mixin(bindCode("MaskList_append", "D_MaskList_append"));
  mixin(bindCode("delete_MaskList", "D_delete_MaskList"));
  mixin(bindCode("MaskList_Upcast", "D_MaskList_Upcast"));
  mixin(bindCode("new_InteractionBox", "D_new_InteractionBox"));
  mixin(bindCode("InteractionBox_normalizePoint__SWIG_0", "D_InteractionBox_normalizePoint__SWIG_0"));
  mixin(bindCode("InteractionBox_normalizePoint__SWIG_1", "D_InteractionBox_normalizePoint__SWIG_1"));
  mixin(bindCode("InteractionBox_denormalizePoint", "D_InteractionBox_denormalizePoint"));
  mixin(bindCode("InteractionBox_center", "D_InteractionBox_center"));
  mixin(bindCode("InteractionBox_width", "D_InteractionBox_width"));
  mixin(bindCode("InteractionBox_height", "D_InteractionBox_height"));
  mixin(bindCode("InteractionBox_depth", "D_InteractionBox_depth"));
  mixin(bindCode("InteractionBox_isValid", "D_InteractionBox_isValid"));
  mixin(bindCode("InteractionBox_invalid", "D_InteractionBox_invalid"));
  mixin(bindCode("InteractionBox_swigOpEquals", "D_InteractionBox_swigOpEquals"));
  mixin(bindCode("InteractionBox_toString", "D_InteractionBox_toString"));
  mixin(bindCode("delete_InteractionBox", "D_delete_InteractionBox"));
  mixin(bindCode("InteractionBox_Upcast", "D_InteractionBox_Upcast"));
  mixin(bindCode("new_Frame", "D_new_Frame"));
  mixin(bindCode("Frame_id", "D_Frame_id"));
  mixin(bindCode("Frame_timestamp", "D_Frame_timestamp"));
  mixin(bindCode("Frame_hands", "D_Frame_hands"));
  mixin(bindCode("Frame_hand", "D_Frame_hand"));
  mixin(bindCode("Frame_pointables", "D_Frame_pointables"));
  mixin(bindCode("Frame_pointable", "D_Frame_pointable"));
  mixin(bindCode("Frame_fingers", "D_Frame_fingers"));
  mixin(bindCode("Frame_finger", "D_Frame_finger"));
  mixin(bindCode("Frame_tools", "D_Frame_tools"));
  mixin(bindCode("Frame_tool", "D_Frame_tool"));
  mixin(bindCode("Frame_gesture", "D_Frame_gesture"));
  mixin(bindCode("Frame_gestures__SWIG_0", "D_Frame_gestures__SWIG_0"));
  mixin(bindCode("Frame_gestures__SWIG_1", "D_Frame_gestures__SWIG_1"));
  mixin(bindCode("Frame_images", "D_Frame_images"));
  mixin(bindCode("Frame_translation", "D_Frame_translation"));
  mixin(bindCode("Frame_translationProbability", "D_Frame_translationProbability"));
  mixin(bindCode("Frame_rotationAxis", "D_Frame_rotationAxis"));
  mixin(bindCode("Frame_rotationAngle__SWIG_0", "D_Frame_rotationAngle__SWIG_0"));
  mixin(bindCode("Frame_rotationAngle__SWIG_1", "D_Frame_rotationAngle__SWIG_1"));
  mixin(bindCode("Frame_rotationMatrix", "D_Frame_rotationMatrix"));
  mixin(bindCode("Frame_rotationProbability", "D_Frame_rotationProbability"));
  mixin(bindCode("Frame_scaleFactor", "D_Frame_scaleFactor"));
  mixin(bindCode("Frame_scaleProbability", "D_Frame_scaleProbability"));
  mixin(bindCode("Frame_interactionBox", "D_Frame_interactionBox"));
  mixin(bindCode("Frame_currentFramesPerSecond", "D_Frame_currentFramesPerSecond"));
  mixin(bindCode("Frame_isValid", "D_Frame_isValid"));
  mixin(bindCode("Frame_invalid", "D_Frame_invalid"));
  mixin(bindCode("Frame_swigOpEquals", "D_Frame_swigOpEquals"));
  mixin(bindCode("Frame_trackedQuad", "D_Frame_trackedQuad"));
  mixin(bindCode("Frame_serialize", "D_Frame_serialize"));
  mixin(bindCode("Frame_serializeLength", "D_Frame_serializeLength"));
  mixin(bindCode("Frame_deserialize", "D_Frame_deserialize"));
  mixin(bindCode("Frame_toString", "D_Frame_toString"));
  mixin(bindCode("delete_Frame", "D_delete_Frame"));
  mixin(bindCode("Frame_Upcast", "D_Frame_Upcast"));
  mixin(bindCode("new_BugReport", "D_new_BugReport"));
  mixin(bindCode("BugReport_beginRecording", "D_BugReport_beginRecording"));
  mixin(bindCode("BugReport_endRecording", "D_BugReport_endRecording"));
  mixin(bindCode("BugReport_isActive", "D_BugReport_isActive"));
  mixin(bindCode("BugReport_progress", "D_BugReport_progress"));
  mixin(bindCode("BugReport_duration", "D_BugReport_duration"));
  mixin(bindCode("delete_BugReport", "D_delete_BugReport"));
  mixin(bindCode("BugReport_Upcast", "D_BugReport_Upcast"));
  mixin(bindCode("new_Config", "D_new_Config"));
  mixin(bindCode("Config_type", "D_Config_type"));
  mixin(bindCode("Config_getBool", "D_Config_getBool"));
  mixin(bindCode("Config_setBool", "D_Config_setBool"));
  mixin(bindCode("Config_getInt32", "D_Config_getInt32"));
  mixin(bindCode("Config_setInt32", "D_Config_setInt32"));
  mixin(bindCode("Config_getFloat", "D_Config_getFloat"));
  mixin(bindCode("Config_setFloat", "D_Config_setFloat"));
  mixin(bindCode("Config_getString", "D_Config_getString"));
  mixin(bindCode("Config_setString", "D_Config_setString"));
  mixin(bindCode("Config_save", "D_Config_save"));
  mixin(bindCode("delete_Config", "D_delete_Config"));
  mixin(bindCode("Config_Upcast", "D_Config_Upcast"));
  mixin(bindCode("new_Controller__SWIG_0", "D_new_Controller__SWIG_0"));
  mixin(bindCode("delete_Controller", "D_delete_Controller"));
  mixin(bindCode("new_Controller__SWIG_1", "D_new_Controller__SWIG_1"));
  mixin(bindCode("Controller_isConnected", "D_Controller_isConnected"));
  mixin(bindCode("Controller_isServiceConnected", "D_Controller_isServiceConnected"));
  mixin(bindCode("Controller_hasFocus", "D_Controller_hasFocus"));
  mixin(bindCode("Controller_policyFlags", "D_Controller_policyFlags"));
  mixin(bindCode("Controller_setPolicyFlags", "D_Controller_setPolicyFlags"));
  mixin(bindCode("Controller_setPolicy", "D_Controller_setPolicy"));
  mixin(bindCode("Controller_clearPolicy", "D_Controller_clearPolicy"));
  mixin(bindCode("Controller_isPolicySet", "D_Controller_isPolicySet"));
  mixin(bindCode("Controller_addListener", "D_Controller_addListener"));
  mixin(bindCode("Controller_removeListener", "D_Controller_removeListener"));
  mixin(bindCode("Controller_frame__SWIG_0", "D_Controller_frame__SWIG_0"));
  mixin(bindCode("Controller_frame__SWIG_1", "D_Controller_frame__SWIG_1"));
  mixin(bindCode("Controller_images", "D_Controller_images"));
  mixin(bindCode("Controller_config", "D_Controller_config"));
  mixin(bindCode("Controller_devices", "D_Controller_devices"));
  mixin(bindCode("Controller_locatedScreens", "D_Controller_locatedScreens"));
  mixin(bindCode("Controller_bugReport", "D_Controller_bugReport"));
  mixin(bindCode("Controller_enableGesture__SWIG_0", "D_Controller_enableGesture__SWIG_0"));
  mixin(bindCode("Controller_enableGesture__SWIG_1", "D_Controller_enableGesture__SWIG_1"));
  mixin(bindCode("Controller_isGestureEnabled", "D_Controller_isGestureEnabled"));
  mixin(bindCode("Controller_trackedQuad", "D_Controller_trackedQuad"));
  mixin(bindCode("Controller_now", "D_Controller_now"));
  mixin(bindCode("Controller_Upcast", "D_Controller_Upcast"));
  mixin(bindCode("new_Listener", "D_new_Listener"));
  mixin(bindCode("delete_Listener", "D_delete_Listener"));
  mixin(bindCode("Listener_onInit", "D_Listener_onInit"));
  mixin(bindCode("Listener_onInitSwigExplicitListener", "D_Listener_onInitSwigExplicitListener"));
  mixin(bindCode("Listener_onConnect", "D_Listener_onConnect"));
  mixin(bindCode("Listener_onConnectSwigExplicitListener", "D_Listener_onConnectSwigExplicitListener"));
  mixin(bindCode("Listener_onDisconnect", "D_Listener_onDisconnect"));
  mixin(bindCode("Listener_onDisconnectSwigExplicitListener", "D_Listener_onDisconnectSwigExplicitListener"));
  mixin(bindCode("Listener_onExit", "D_Listener_onExit"));
  mixin(bindCode("Listener_onExitSwigExplicitListener", "D_Listener_onExitSwigExplicitListener"));
  mixin(bindCode("Listener_onFrame", "D_Listener_onFrame"));
  mixin(bindCode("Listener_onFrameSwigExplicitListener", "D_Listener_onFrameSwigExplicitListener"));
  mixin(bindCode("Listener_onFocusGained", "D_Listener_onFocusGained"));
  mixin(bindCode("Listener_onFocusGainedSwigExplicitListener", "D_Listener_onFocusGainedSwigExplicitListener"));
  mixin(bindCode("Listener_onFocusLost", "D_Listener_onFocusLost"));
  mixin(bindCode("Listener_onFocusLostSwigExplicitListener", "D_Listener_onFocusLostSwigExplicitListener"));
  mixin(bindCode("Listener_onServiceConnect", "D_Listener_onServiceConnect"));
  mixin(bindCode("Listener_onServiceConnectSwigExplicitListener", "D_Listener_onServiceConnectSwigExplicitListener"));
  mixin(bindCode("Listener_onServiceDisconnect", "D_Listener_onServiceDisconnect"));
  mixin(bindCode("Listener_onServiceDisconnectSwigExplicitListener", "D_Listener_onServiceDisconnectSwigExplicitListener"));
  mixin(bindCode("Listener_onDeviceChange", "D_Listener_onDeviceChange"));
  mixin(bindCode("Listener_onDeviceChangeSwigExplicitListener", "D_Listener_onDeviceChangeSwigExplicitListener"));
  mixin(bindCode("Listener_onImages", "D_Listener_onImages"));
  mixin(bindCode("Listener_onImagesSwigExplicitListener", "D_Listener_onImagesSwigExplicitListener"));
  mixin(bindCode("Listener_director_connect", "D_Listener_director_connect"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacksLeap;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallbackLeap;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacksLeap(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(const char* message) {
    auto exception = new object.Exception(std.conv.to!string(message));
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingException = null;
  }

  static bool isPending() {
    return m_sPendingException !is null;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      e.next = m_sPendingException;
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
  }

  static object.Exception retrieve() {
    auto e = m_sPendingException;
    m_sPendingException = null;
    return e;
  }

private:
  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallbackLeap(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;


template SwigExternC(T) if (is(typeof(*(T.init)) P == function)) {
  static if (is(typeof(*(T.init)) R == return)) {
    static if (is(typeof(*(T.init)) P == function)) {
      alias extern(C) R function(P) SwigExternC;
    }
  }
}

SwigExternC!(float function()) PI_get;
SwigExternC!(float function()) DEG_TO_RAD_get;
SwigExternC!(float function()) RAD_TO_DEG_get;
SwigExternC!(float function()) EPSILON_get;
SwigExternC!(void* function()) new_Vector__SWIG_0;
SwigExternC!(void* function(float jarg1, float jarg2, float jarg3)) new_Vector__SWIG_1;
SwigExternC!(void* function(void* jarg1)) new_Vector__SWIG_2;
SwigExternC!(void* function()) Vector_zero;
SwigExternC!(void* function()) Vector_xAxis;
SwigExternC!(void* function()) Vector_yAxis;
SwigExternC!(void* function()) Vector_zAxis;
SwigExternC!(void* function()) Vector_left;
SwigExternC!(void* function()) Vector_right;
SwigExternC!(void* function()) Vector_down;
SwigExternC!(void* function()) Vector_up;
SwigExternC!(void* function()) Vector_forward;
SwigExternC!(void* function()) Vector_backward;
SwigExternC!(float function(void* jarg1)) Vector_magnitude;
SwigExternC!(float function(void* jarg1)) Vector_magnitudeSquared;
SwigExternC!(float function(void* jarg1, void* jarg2)) Vector_distanceTo;
SwigExternC!(float function(void* jarg1, void* jarg2)) Vector_angleTo;
SwigExternC!(float function(void* jarg1)) Vector_pitch;
SwigExternC!(float function(void* jarg1)) Vector_yaw;
SwigExternC!(float function(void* jarg1)) Vector_roll;
SwigExternC!(float function(void* jarg1, void* jarg2)) Vector_dot;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Vector_cross;
SwigExternC!(void* function(void* jarg1)) Vector_normalized;
SwigExternC!(void* function(void* jarg1)) Vector_swigOpNeg;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Vector_swigOpAdd;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Vector_swigOpSub;
SwigExternC!(void* function(void* jarg1, float jarg2)) Vector_swigOpMul;
SwigExternC!(void* function(void* jarg1, float jarg2)) Vector_swigOpDiv;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Vector_swigOpAddAssign;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Vector_swigOpSubAssign;
SwigExternC!(void* function(void* jarg1, float jarg2)) Vector_swigOpMulAssign;
SwigExternC!(void* function(void* jarg1, float jarg2)) Vector_swigOpDivAssign;
SwigExternC!(const(char)* function(void* jarg1)) Vector_toString;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Vector_swigOpEquals;
SwigExternC!(uint function(void* jarg1)) Vector_isValid;
SwigExternC!(float function(void* jarg1, uint jarg2)) Vector_opIndex;
SwigExternC!(void* function(void* jarg1)) Vector_toFloatPointer;
SwigExternC!(void function(void* jarg1, float jarg2)) Vector_x_set;
SwigExternC!(float function(void* jarg1)) Vector_x_get;
SwigExternC!(void function(void* jarg1, float jarg2)) Vector_y_set;
SwigExternC!(float function(void* jarg1)) Vector_y_get;
SwigExternC!(void function(void* jarg1, float jarg2)) Vector_z_set;
SwigExternC!(float function(void* jarg1)) Vector_z_get;
SwigExternC!(void function(void* jarg1)) delete_Vector;
SwigExternC!(void* function(void* jarg1, uint jarg2)) FloatArray_opIndex;
SwigExternC!(void function(void* jarg1, void* jarg2)) FloatArray_m_array_set;
SwigExternC!(void* function(void* jarg1)) FloatArray_m_array_get;
SwigExternC!(void* function()) new_FloatArray;
SwigExternC!(void function(void* jarg1)) delete_FloatArray;
SwigExternC!(void* function()) new_Matrix__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Matrix__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3)) new_Matrix__SWIG_2;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3, void* jarg4)) new_Matrix__SWIG_3;
SwigExternC!(void* function(void* jarg1, float jarg2)) new_Matrix__SWIG_4;
SwigExternC!(void* function(void* jarg1, float jarg2, void* jarg3)) new_Matrix__SWIG_5;
SwigExternC!(void* function()) Matrix_identity;
SwigExternC!(void function(void* jarg1, void* jarg2, float jarg3)) Matrix_setRotation;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Matrix_transformPoint;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Matrix_transformDirection;
SwigExternC!(void* function(void* jarg1)) Matrix_rigidInverse;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Matrix_swigOpMul;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Matrix_swigOpMulAssign;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Matrix_swigOpEquals;
SwigExternC!(void* function(void* jarg1)) Matrix_toArray3x3;
SwigExternC!(void* function(void* jarg1)) Matrix_toArray4x4;
SwigExternC!(const(char)* function(void* jarg1)) Matrix_toString;
SwigExternC!(void function(void* jarg1, void* jarg2)) Matrix_xBasis_set;
SwigExternC!(void* function(void* jarg1)) Matrix_xBasis_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) Matrix_yBasis_set;
SwigExternC!(void* function(void* jarg1)) Matrix_yBasis_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) Matrix_zBasis_set;
SwigExternC!(void* function(void* jarg1)) Matrix_zBasis_get;
SwigExternC!(void function(void* jarg1, void* jarg2)) Matrix_origin_set;
SwigExternC!(void* function(void* jarg1)) Matrix_origin_get;
SwigExternC!(void function(void* jarg1)) delete_Matrix;
SwigExternC!(void* function()) new_Pointable;
SwigExternC!(int function(void* jarg1)) Pointable_id;
SwigExternC!(void* function(void* jarg1)) Pointable_frame;
SwigExternC!(void* function(void* jarg1)) Pointable_hand;
SwigExternC!(void* function(void* jarg1)) Pointable_tipPosition;
SwigExternC!(void* function(void* jarg1)) Pointable_tipVelocity;
SwigExternC!(void* function(void* jarg1)) Pointable_direction;
SwigExternC!(float function(void* jarg1)) Pointable_width;
SwigExternC!(float function(void* jarg1)) Pointable_length;
SwigExternC!(uint function(void* jarg1)) Pointable_isFinger;
SwigExternC!(uint function(void* jarg1)) Pointable_isTool;
SwigExternC!(uint function(void* jarg1)) Pointable_isExtended;
SwigExternC!(uint function(void* jarg1)) Pointable_isValid;
SwigExternC!(int function(void* jarg1)) Pointable_touchZone;
SwigExternC!(float function(void* jarg1)) Pointable_touchDistance;
SwigExternC!(void* function(void* jarg1)) Pointable_stabilizedTipPosition;
SwigExternC!(float function(void* jarg1)) Pointable_timeVisible;
SwigExternC!(void* function()) Pointable_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Pointable_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Pointable_toString;
SwigExternC!(void function(void* jarg1)) delete_Pointable;
SwigExternC!(void* function(void* objectRef)) Pointable_Upcast;
SwigExternC!(void* function()) new_Arm;
SwigExternC!(float function(void* jarg1)) Arm_width;
SwigExternC!(void* function(void* jarg1)) Arm_direction;
SwigExternC!(void* function(void* jarg1)) Arm_basis;
SwigExternC!(void* function(void* jarg1)) Arm_elbowPosition;
SwigExternC!(void* function(void* jarg1)) Arm_wristPosition;
SwigExternC!(void* function(void* jarg1)) Arm_center;
SwigExternC!(uint function(void* jarg1)) Arm_isValid;
SwigExternC!(void* function()) Arm_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Arm_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Arm_toString;
SwigExternC!(void function(void* jarg1)) delete_Arm;
SwigExternC!(void* function(void* objectRef)) Arm_Upcast;
SwigExternC!(void* function()) new_Bone;
SwigExternC!(void* function(void* jarg1)) Bone_prevJoint;
SwigExternC!(void* function(void* jarg1)) Bone_nextJoint;
SwigExternC!(void* function(void* jarg1)) Bone_center;
SwigExternC!(void* function(void* jarg1)) Bone_direction;
SwigExternC!(float function(void* jarg1)) Bone_length;
SwigExternC!(float function(void* jarg1)) Bone_width;
SwigExternC!(int function(void* jarg1)) Bone_type;
SwigExternC!(void* function(void* jarg1)) Bone_basis;
SwigExternC!(uint function(void* jarg1)) Bone_isValid;
SwigExternC!(void* function()) Bone_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Bone_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Bone_toString;
SwigExternC!(void function(void* jarg1)) delete_Bone;
SwigExternC!(void* function(void* objectRef)) Bone_Upcast;
SwigExternC!(void* function()) new_Finger__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Finger__SWIG_1;
SwigExternC!(void* function(void* jarg1, int jarg2)) Finger_jointPosition;
SwigExternC!(void* function(void* jarg1, int jarg2)) Finger_bone;
SwigExternC!(int function(void* jarg1)) Finger_type;
SwigExternC!(void* function()) Finger_invalid;
SwigExternC!(const(char)* function(void* jarg1)) Finger_toString;
SwigExternC!(void function(void* jarg1)) delete_Finger;
SwigExternC!(void* function(void* objectRef)) Finger_Upcast;
SwigExternC!(void* function()) new_Tool__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Tool__SWIG_1;
SwigExternC!(void* function()) Tool_invalid;
SwigExternC!(const(char)* function(void* jarg1)) Tool_toString;
SwigExternC!(void function(void* jarg1)) delete_Tool;
SwigExternC!(void* function(void* objectRef)) Tool_Upcast;
SwigExternC!(void* function()) new_Hand;
SwigExternC!(int function(void* jarg1)) Hand_id;
SwigExternC!(void* function(void* jarg1)) Hand_frame;
SwigExternC!(void* function(void* jarg1)) Hand_pointables;
SwigExternC!(void* function(void* jarg1, int jarg2)) Hand_pointable;
SwigExternC!(void* function(void* jarg1)) Hand_fingers;
SwigExternC!(void* function(void* jarg1, int jarg2)) Hand_finger;
SwigExternC!(void* function(void* jarg1)) Hand_tools;
SwigExternC!(void* function(void* jarg1, int jarg2)) Hand_tool;
SwigExternC!(void* function(void* jarg1)) Hand_palmPosition;
SwigExternC!(void* function(void* jarg1)) Hand_stabilizedPalmPosition;
SwigExternC!(void* function(void* jarg1)) Hand_palmVelocity;
SwigExternC!(void* function(void* jarg1)) Hand_palmNormal;
SwigExternC!(float function(void* jarg1)) Hand_palmWidth;
SwigExternC!(void* function(void* jarg1)) Hand_direction;
SwigExternC!(void* function(void* jarg1)) Hand_basis;
SwigExternC!(void* function(void* jarg1)) Hand_arm;
SwigExternC!(void* function(void* jarg1)) Hand_wristPosition;
SwigExternC!(void* function(void* jarg1)) Hand_sphereCenter;
SwigExternC!(float function(void* jarg1)) Hand_sphereRadius;
SwigExternC!(float function(void* jarg1)) Hand_pinchStrength;
SwigExternC!(float function(void* jarg1)) Hand_grabStrength;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Hand_translation;
SwigExternC!(float function(void* jarg1, void* jarg2)) Hand_translationProbability;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Hand_rotationAxis;
SwigExternC!(float function(void* jarg1, void* jarg2)) Hand_rotationAngle__SWIG_0;
SwigExternC!(float function(void* jarg1, void* jarg2, void* jarg3)) Hand_rotationAngle__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Hand_rotationMatrix;
SwigExternC!(float function(void* jarg1, void* jarg2)) Hand_rotationProbability;
SwigExternC!(float function(void* jarg1, void* jarg2)) Hand_scaleFactor;
SwigExternC!(float function(void* jarg1, void* jarg2)) Hand_scaleProbability;
SwigExternC!(float function(void* jarg1)) Hand_timeVisible;
SwigExternC!(float function(void* jarg1)) Hand_confidence;
SwigExternC!(uint function(void* jarg1)) Hand_isLeft;
SwigExternC!(uint function(void* jarg1)) Hand_isRight;
SwigExternC!(uint function(void* jarg1)) Hand_isValid;
SwigExternC!(void* function()) Hand_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Hand_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Hand_toString;
SwigExternC!(void function(void* jarg1)) delete_Hand;
SwigExternC!(void* function(void* objectRef)) Hand_Upcast;
SwigExternC!(void* function()) new_Gesture__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_Gesture__SWIG_1;
SwigExternC!(int function(void* jarg1)) Gesture_type;
SwigExternC!(int function(void* jarg1)) Gesture_state;
SwigExternC!(int function(void* jarg1)) Gesture_id;
SwigExternC!(long function(void* jarg1)) Gesture_duration;
SwigExternC!(float function(void* jarg1)) Gesture_durationSeconds;
SwigExternC!(void* function(void* jarg1)) Gesture_frame;
SwigExternC!(void* function(void* jarg1)) Gesture_hands;
SwigExternC!(void* function(void* jarg1)) Gesture_pointables;
SwigExternC!(uint function(void* jarg1)) Gesture_isValid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Gesture_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Gesture_toString;
SwigExternC!(void* function()) Gesture_invalid;
SwigExternC!(void function(void* jarg1)) delete_Gesture;
SwigExternC!(void* function(void* objectRef)) Gesture_Upcast;
SwigExternC!(int function()) SwipeGesture_classType;
SwigExternC!(void* function()) new_SwipeGesture__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_SwipeGesture__SWIG_1;
SwigExternC!(void* function(void* jarg1)) SwipeGesture_startPosition;
SwigExternC!(void* function(void* jarg1)) SwipeGesture_position;
SwigExternC!(void* function(void* jarg1)) SwipeGesture_direction;
SwigExternC!(float function(void* jarg1)) SwipeGesture_speed;
SwigExternC!(void* function(void* jarg1)) SwipeGesture_pointable;
SwigExternC!(void function(void* jarg1)) delete_SwipeGesture;
SwigExternC!(void* function(void* objectRef)) SwipeGesture_Upcast;
SwigExternC!(int function()) CircleGesture_classType;
SwigExternC!(void* function()) new_CircleGesture__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_CircleGesture__SWIG_1;
SwigExternC!(void* function(void* jarg1)) CircleGesture_center;
SwigExternC!(void* function(void* jarg1)) CircleGesture_normal;
SwigExternC!(float function(void* jarg1)) CircleGesture_progress;
SwigExternC!(float function(void* jarg1)) CircleGesture_radius;
SwigExternC!(void* function(void* jarg1)) CircleGesture_pointable;
SwigExternC!(void function(void* jarg1)) delete_CircleGesture;
SwigExternC!(void* function(void* objectRef)) CircleGesture_Upcast;
SwigExternC!(int function()) ScreenTapGesture_classType;
SwigExternC!(void* function()) new_ScreenTapGesture__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_ScreenTapGesture__SWIG_1;
SwigExternC!(void* function(void* jarg1)) ScreenTapGesture_position;
SwigExternC!(void* function(void* jarg1)) ScreenTapGesture_direction;
SwigExternC!(float function(void* jarg1)) ScreenTapGesture_progress;
SwigExternC!(void* function(void* jarg1)) ScreenTapGesture_pointable;
SwigExternC!(void function(void* jarg1)) delete_ScreenTapGesture;
SwigExternC!(void* function(void* objectRef)) ScreenTapGesture_Upcast;
SwigExternC!(int function()) KeyTapGesture_classType;
SwigExternC!(void* function()) new_KeyTapGesture__SWIG_0;
SwigExternC!(void* function(void* jarg1)) new_KeyTapGesture__SWIG_1;
SwigExternC!(void* function(void* jarg1)) KeyTapGesture_position;
SwigExternC!(void* function(void* jarg1)) KeyTapGesture_direction;
SwigExternC!(float function(void* jarg1)) KeyTapGesture_progress;
SwigExternC!(void* function(void* jarg1)) KeyTapGesture_pointable;
SwigExternC!(void function(void* jarg1)) delete_KeyTapGesture;
SwigExternC!(void* function(void* objectRef)) KeyTapGesture_Upcast;
SwigExternC!(void* function()) new_Screen;
SwigExternC!(int function(void* jarg1)) Screen_id;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3, float jarg4)) Screen_intersect__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3)) Screen_intersect__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3, uint jarg4, float jarg5)) Screen_intersect__SWIG_2;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3, uint jarg4)) Screen_intersect__SWIG_3;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3, float jarg4)) Screen_project__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3)) Screen_project__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Screen_horizontalAxis;
SwigExternC!(void* function(void* jarg1)) Screen_verticalAxis;
SwigExternC!(void* function(void* jarg1)) Screen_bottomLeftCorner;
SwigExternC!(void* function(void* jarg1)) Screen_normal;
SwigExternC!(int function(void* jarg1)) Screen_widthPixels;
SwigExternC!(int function(void* jarg1)) Screen_heightPixels;
SwigExternC!(float function(void* jarg1, void* jarg2)) Screen_distanceToPoint;
SwigExternC!(uint function(void* jarg1)) Screen_isValid;
SwigExternC!(void* function()) Screen_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Screen_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Screen_toString;
SwigExternC!(void function(void* jarg1)) delete_Screen;
SwigExternC!(void* function(void* objectRef)) Screen_Upcast;
SwigExternC!(void* function()) new_Device;
SwigExternC!(float function(void* jarg1)) Device_horizontalViewAngle;
SwigExternC!(float function(void* jarg1)) Device_verticalViewAngle;
SwigExternC!(float function(void* jarg1)) Device_range;
SwigExternC!(float function(void* jarg1)) Device_baseline;
SwigExternC!(float function(void* jarg1, void* jarg2)) Device_distanceToBoundary;
SwigExternC!(uint function(void* jarg1)) Device_isEmbedded;
SwigExternC!(uint function(void* jarg1)) Device_isStreaming;
SwigExternC!(uint function(void* jarg1)) Device_isFlipped;
SwigExternC!(int function(void* jarg1)) Device_type;
SwigExternC!(const(char)* function(void* jarg1)) Device_serialNumber;
SwigExternC!(void* function(void* jarg1)) Device_position;
SwigExternC!(void* function(void* jarg1)) Device_orientation;
SwigExternC!(uint function(void* jarg1)) Device_isValid;
SwigExternC!(void* function()) Device_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Device_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Device_toString;
SwigExternC!(void function(void* jarg1)) delete_Device;
SwigExternC!(void* function(void* objectRef)) Device_Upcast;
SwigExternC!(void* function()) new_Image;
SwigExternC!(long function(void* jarg1)) Image_sequenceId;
SwigExternC!(int function(void* jarg1)) Image_id;
SwigExternC!(void function(void* jarg1, void* jarg2)) Image_data;
SwigExternC!(void function(void* jarg1, void* jarg2)) Image_distortion;
SwigExternC!(int function(void* jarg1)) Image_width;
SwigExternC!(int function(void* jarg1)) Image_height;
SwigExternC!(int function(void* jarg1)) Image_bytesPerPixel;
SwigExternC!(int function(void* jarg1)) Image_format;
SwigExternC!(int function(void* jarg1)) Image_distortionWidth;
SwigExternC!(int function(void* jarg1)) Image_distortionHeight;
SwigExternC!(float function(void* jarg1)) Image_rayOffsetX;
SwigExternC!(float function(void* jarg1)) Image_rayOffsetY;
SwigExternC!(float function(void* jarg1)) Image_rayScaleX;
SwigExternC!(float function(void* jarg1)) Image_rayScaleY;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Image_rectify;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Image_warp;
SwigExternC!(long function(void* jarg1)) Image_timestamp;
SwigExternC!(uint function(void* jarg1)) Image_isValid;
SwigExternC!(void* function()) Image_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Image_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Image_toString;
SwigExternC!(void function(void* jarg1)) delete_Image;
SwigExternC!(void* function(void* objectRef)) Image_Upcast;
SwigExternC!(void* function()) new_Mask;
SwigExternC!(long function(void* jarg1)) Mask_sequenceId;
SwigExternC!(int function(void* jarg1)) Mask_id;
SwigExternC!(void function(void* jarg1, void* jarg2)) Mask_data;
SwigExternC!(int function(void* jarg1)) Mask_width;
SwigExternC!(int function(void* jarg1)) Mask_height;
SwigExternC!(int function(void* jarg1)) Mask_offsetX;
SwigExternC!(int function(void* jarg1)) Mask_offsetY;
SwigExternC!(uint function(void* jarg1)) Mask_isValid;
SwigExternC!(void* function()) Mask_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Mask_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) Mask_toString;
SwigExternC!(void function(void* jarg1)) delete_Mask;
SwigExternC!(void* function(void* objectRef)) Mask_Upcast;
SwigExternC!(void* function()) new_PointableList;
SwigExternC!(int function(void* jarg1)) PointableList_count;
SwigExternC!(uint function(void* jarg1)) PointableList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) PointableList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) PointableList_append__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) PointableList_append__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) PointableList_append__SWIG_2;
SwigExternC!(void* function(void* jarg1)) PointableList_leftmost;
SwigExternC!(void* function(void* jarg1)) PointableList_rightmost;
SwigExternC!(void* function(void* jarg1)) PointableList_frontmost;
SwigExternC!(void* function(void* jarg1)) PointableList_extended;
SwigExternC!(void function(void* jarg1)) delete_PointableList;
SwigExternC!(void* function(void* objectRef)) PointableList_Upcast;
SwigExternC!(void* function()) new_FingerList;
SwigExternC!(int function(void* jarg1)) FingerList_count;
SwigExternC!(uint function(void* jarg1)) FingerList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) FingerList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) FingerList_append;
SwigExternC!(void* function(void* jarg1)) FingerList_leftmost;
SwigExternC!(void* function(void* jarg1)) FingerList_rightmost;
SwigExternC!(void* function(void* jarg1)) FingerList_frontmost;
SwigExternC!(void* function(void* jarg1)) FingerList_extended;
SwigExternC!(void* function(void* jarg1, int jarg2)) FingerList_fingerType;
SwigExternC!(void function(void* jarg1)) delete_FingerList;
SwigExternC!(void* function(void* objectRef)) FingerList_Upcast;
SwigExternC!(void* function()) new_ToolList;
SwigExternC!(int function(void* jarg1)) ToolList_count;
SwigExternC!(uint function(void* jarg1)) ToolList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) ToolList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) ToolList_append;
SwigExternC!(void* function(void* jarg1)) ToolList_leftmost;
SwigExternC!(void* function(void* jarg1)) ToolList_rightmost;
SwigExternC!(void* function(void* jarg1)) ToolList_frontmost;
SwigExternC!(void function(void* jarg1)) delete_ToolList;
SwigExternC!(void* function(void* objectRef)) ToolList_Upcast;
SwigExternC!(void* function()) new_HandList;
SwigExternC!(int function(void* jarg1)) HandList_count;
SwigExternC!(uint function(void* jarg1)) HandList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) HandList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) HandList_append;
SwigExternC!(void* function(void* jarg1)) HandList_leftmost;
SwigExternC!(void* function(void* jarg1)) HandList_rightmost;
SwigExternC!(void* function(void* jarg1)) HandList_frontmost;
SwigExternC!(void function(void* jarg1)) delete_HandList;
SwigExternC!(void* function(void* objectRef)) HandList_Upcast;
SwigExternC!(void* function()) new_GestureList;
SwigExternC!(int function(void* jarg1)) GestureList_count;
SwigExternC!(uint function(void* jarg1)) GestureList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) GestureList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) GestureList_append;
SwigExternC!(void function(void* jarg1)) delete_GestureList;
SwigExternC!(void* function(void* objectRef)) GestureList_Upcast;
SwigExternC!(void* function()) new_ScreenList;
SwigExternC!(int function(void* jarg1)) ScreenList_count;
SwigExternC!(uint function(void* jarg1)) ScreenList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) ScreenList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) ScreenList_closestScreenHit__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2, void* jarg3)) ScreenList_closestScreenHit__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) ScreenList_closestScreen;
SwigExternC!(void function(void* jarg1)) delete_ScreenList;
SwigExternC!(void* function(void* objectRef)) ScreenList_Upcast;
SwigExternC!(void* function()) new_DeviceList;
SwigExternC!(int function(void* jarg1)) DeviceList_count;
SwigExternC!(uint function(void* jarg1)) DeviceList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) DeviceList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) DeviceList_append;
SwigExternC!(void function(void* jarg1)) delete_DeviceList;
SwigExternC!(void* function(void* objectRef)) DeviceList_Upcast;
SwigExternC!(void* function()) new_ImageList;
SwigExternC!(int function(void* jarg1)) ImageList_count;
SwigExternC!(uint function(void* jarg1)) ImageList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) ImageList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) ImageList_append;
SwigExternC!(void function(void* jarg1)) delete_ImageList;
SwigExternC!(void* function(void* objectRef)) ImageList_Upcast;
SwigExternC!(void* function()) new_TrackedQuad;
SwigExternC!(float function(void* jarg1)) TrackedQuad_width;
SwigExternC!(float function(void* jarg1)) TrackedQuad_height;
SwigExternC!(int function(void* jarg1)) TrackedQuad_resolutionX;
SwigExternC!(int function(void* jarg1)) TrackedQuad_resolutionY;
SwigExternC!(uint function(void* jarg1)) TrackedQuad_visible;
SwigExternC!(void* function(void* jarg1)) TrackedQuad_orientation;
SwigExternC!(void* function(void* jarg1)) TrackedQuad_position;
SwigExternC!(void* function(void* jarg1)) TrackedQuad_masks;
SwigExternC!(void* function(void* jarg1)) TrackedQuad_images;
SwigExternC!(uint function(void* jarg1)) TrackedQuad_isValid;
SwigExternC!(void* function()) TrackedQuad_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) TrackedQuad_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) TrackedQuad_toString;
SwigExternC!(void function(void* jarg1)) delete_TrackedQuad;
SwigExternC!(void* function(void* objectRef)) TrackedQuad_Upcast;
SwigExternC!(void* function()) new_MaskList;
SwigExternC!(int function(void* jarg1)) MaskList_count;
SwigExternC!(uint function(void* jarg1)) MaskList_isEmpty;
SwigExternC!(void* function(void* jarg1, int jarg2)) MaskList_opIndex;
SwigExternC!(void* function(void* jarg1, void* jarg2)) MaskList_append;
SwigExternC!(void function(void* jarg1)) delete_MaskList;
SwigExternC!(void* function(void* objectRef)) MaskList_Upcast;
SwigExternC!(void* function()) new_InteractionBox;
SwigExternC!(void* function(void* jarg1, void* jarg2, uint jarg3)) InteractionBox_normalizePoint__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) InteractionBox_normalizePoint__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) InteractionBox_denormalizePoint;
SwigExternC!(void* function(void* jarg1)) InteractionBox_center;
SwigExternC!(float function(void* jarg1)) InteractionBox_width;
SwigExternC!(float function(void* jarg1)) InteractionBox_height;
SwigExternC!(float function(void* jarg1)) InteractionBox_depth;
SwigExternC!(uint function(void* jarg1)) InteractionBox_isValid;
SwigExternC!(void* function()) InteractionBox_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) InteractionBox_swigOpEquals;
SwigExternC!(const(char)* function(void* jarg1)) InteractionBox_toString;
SwigExternC!(void function(void* jarg1)) delete_InteractionBox;
SwigExternC!(void* function(void* objectRef)) InteractionBox_Upcast;
SwigExternC!(void* function()) new_Frame;
SwigExternC!(long function(void* jarg1)) Frame_id;
SwigExternC!(long function(void* jarg1)) Frame_timestamp;
SwigExternC!(void* function(void* jarg1)) Frame_hands;
SwigExternC!(void* function(void* jarg1, int jarg2)) Frame_hand;
SwigExternC!(void* function(void* jarg1)) Frame_pointables;
SwigExternC!(void* function(void* jarg1, int jarg2)) Frame_pointable;
SwigExternC!(void* function(void* jarg1)) Frame_fingers;
SwigExternC!(void* function(void* jarg1, int jarg2)) Frame_finger;
SwigExternC!(void* function(void* jarg1)) Frame_tools;
SwigExternC!(void* function(void* jarg1, int jarg2)) Frame_tool;
SwigExternC!(void* function(void* jarg1, int jarg2)) Frame_gesture;
SwigExternC!(void* function(void* jarg1)) Frame_gestures__SWIG_0;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Frame_gestures__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Frame_images;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Frame_translation;
SwigExternC!(float function(void* jarg1, void* jarg2)) Frame_translationProbability;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Frame_rotationAxis;
SwigExternC!(float function(void* jarg1, void* jarg2)) Frame_rotationAngle__SWIG_0;
SwigExternC!(float function(void* jarg1, void* jarg2, void* jarg3)) Frame_rotationAngle__SWIG_1;
SwigExternC!(void* function(void* jarg1, void* jarg2)) Frame_rotationMatrix;
SwigExternC!(float function(void* jarg1, void* jarg2)) Frame_rotationProbability;
SwigExternC!(float function(void* jarg1, void* jarg2)) Frame_scaleFactor;
SwigExternC!(float function(void* jarg1, void* jarg2)) Frame_scaleProbability;
SwigExternC!(void* function(void* jarg1)) Frame_interactionBox;
SwigExternC!(float function(void* jarg1)) Frame_currentFramesPerSecond;
SwigExternC!(uint function(void* jarg1)) Frame_isValid;
SwigExternC!(void* function()) Frame_invalid;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Frame_swigOpEquals;
SwigExternC!(void* function(void* jarg1)) Frame_trackedQuad;
SwigExternC!(void function(void* jarg1, void* jarg2)) Frame_serialize;
SwigExternC!(int function(void* jarg1)) Frame_serializeLength;
SwigExternC!(void function(void* jarg1, void* jarg2, int jarg3)) Frame_deserialize;
SwigExternC!(const(char)* function(void* jarg1)) Frame_toString;
SwigExternC!(void function(void* jarg1)) delete_Frame;
SwigExternC!(void* function(void* objectRef)) Frame_Upcast;
SwigExternC!(void* function()) new_BugReport;
SwigExternC!(uint function(void* jarg1)) BugReport_beginRecording;
SwigExternC!(void function(void* jarg1)) BugReport_endRecording;
SwigExternC!(uint function(void* jarg1)) BugReport_isActive;
SwigExternC!(float function(void* jarg1)) BugReport_progress;
SwigExternC!(float function(void* jarg1)) BugReport_duration;
SwigExternC!(void function(void* jarg1)) delete_BugReport;
SwigExternC!(void* function(void* objectRef)) BugReport_Upcast;
SwigExternC!(void* function()) new_Config;
SwigExternC!(int function(void* jarg1, const(char)* jarg2)) Config_type;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2)) Config_getBool;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2, uint jarg3)) Config_setBool;
SwigExternC!(int function(void* jarg1, const(char)* jarg2)) Config_getInt32;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2, int jarg3)) Config_setInt32;
SwigExternC!(float function(void* jarg1, const(char)* jarg2)) Config_getFloat;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2, float jarg3)) Config_setFloat;
SwigExternC!(const(char)* function(void* jarg1, const(char)* jarg2)) Config_getString;
SwigExternC!(uint function(void* jarg1, const(char)* jarg2, const(char)* jarg3)) Config_setString;
SwigExternC!(uint function(void* jarg1)) Config_save;
SwigExternC!(void function(void* jarg1)) delete_Config;
SwigExternC!(void* function(void* objectRef)) Config_Upcast;
SwigExternC!(void* function()) new_Controller__SWIG_0;
SwigExternC!(void function(void* jarg1)) delete_Controller;
SwigExternC!(void* function(void* jarg1)) new_Controller__SWIG_1;
SwigExternC!(uint function(void* jarg1)) Controller_isConnected;
SwigExternC!(uint function(void* jarg1)) Controller_isServiceConnected;
SwigExternC!(uint function(void* jarg1)) Controller_hasFocus;
SwigExternC!(int function(void* jarg1)) Controller_policyFlags;
SwigExternC!(void function(void* jarg1, int jarg2)) Controller_setPolicyFlags;
SwigExternC!(void function(void* jarg1, int jarg2)) Controller_setPolicy;
SwigExternC!(void function(void* jarg1, int jarg2)) Controller_clearPolicy;
SwigExternC!(uint function(void* jarg1, int jarg2)) Controller_isPolicySet;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Controller_addListener;
SwigExternC!(uint function(void* jarg1, void* jarg2)) Controller_removeListener;
SwigExternC!(void* function(void* jarg1, int jarg2)) Controller_frame__SWIG_0;
SwigExternC!(void* function(void* jarg1)) Controller_frame__SWIG_1;
SwigExternC!(void* function(void* jarg1)) Controller_images;
SwigExternC!(void* function(void* jarg1)) Controller_config;
SwigExternC!(void* function(void* jarg1)) Controller_devices;
SwigExternC!(void* function(void* jarg1)) Controller_locatedScreens;
SwigExternC!(void* function(void* jarg1)) Controller_bugReport;
SwigExternC!(void function(void* jarg1, int jarg2, uint jarg3)) Controller_enableGesture__SWIG_0;
SwigExternC!(void function(void* jarg1, int jarg2)) Controller_enableGesture__SWIG_1;
SwigExternC!(uint function(void* jarg1, int jarg2)) Controller_isGestureEnabled;
SwigExternC!(void* function(void* jarg1)) Controller_trackedQuad;
SwigExternC!(long function(void* jarg1)) Controller_now;
SwigExternC!(void* function(void* objectRef)) Controller_Upcast;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback0;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback1;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback2;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback3;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback4;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback5;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback6;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback7;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback8;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback9;
alias extern(C) void function(void*, void* arg0) SwigDirector_Listener_Callback10;
SwigExternC!(void* function()) new_Listener;
SwigExternC!(void function(void* jarg1)) delete_Listener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onInit;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onInitSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onConnect;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onConnectSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onDisconnect;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onDisconnectSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onExit;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onExitSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFrame;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFrameSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFocusGained;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFocusGainedSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFocusLost;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onFocusLostSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onServiceConnect;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onServiceConnectSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onServiceDisconnect;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onServiceDisconnectSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onDeviceChange;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onDeviceChangeSwigExplicitListener;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onImages;
SwigExternC!(void function(void* jarg1, void* jarg2)) Listener_onImagesSwigExplicitListener;
extern(C) void function(void* cObject, void* dObject, SwigDirector_Listener_Callback0 callback0, SwigDirector_Listener_Callback1 callback1, SwigDirector_Listener_Callback2 callback2, SwigDirector_Listener_Callback3 callback3, SwigDirector_Listener_Callback4 callback4, SwigDirector_Listener_Callback5 callback5, SwigDirector_Listener_Callback6 callback6, SwigDirector_Listener_Callback7 callback7, SwigDirector_Listener_Callback8 callback8, SwigDirector_Listener_Callback9 callback9, SwigDirector_Listener_Callback10 callback10) Listener_director_connect;
